syntax = "proto2";

package b0.resolver_msgs;

// Data structure to contain identification of a node
message NodeID {
  required bytes host_id = 1;
  required uint32 process_id = 2;
  required string thread_id = 3;
}

// Sent by node to resolver, to announce its presence
// and try to self-assign a name
message AnnounceNodeRequest {
  required NodeID node_id = 1;
  optional string node_name = 8;
}

// Sent by resolver in reply to AnnounceNodeRequest message, to assign final name
// and give some connection information
message AnnounceNodeResponse {
  required bool ok = 1;
  optional string node_name = 2;
  required string xsub_sock_addr = 3;
  required string xpub_sock_addr = 4;
}

// Sent by node to resolver when shutting down
// (it's not really a request buit rather a notification)
message ShutdownNodeRequest {
  required NodeID node_id = 1;
}

// Sent by resolver to node in reply to ShutdownNodeRequest
// (but probably will not be received)
message ShutdownNodeResponse {
  required bool ok = 1;
}

// Sent by ServiceServer to announce a service by some name
// The name must be unique
message AnnounceServiceRequest {
  required NodeID node_id = 1;
  required string service_name = 2;
  required string sock_addr = 3;
}

// Response to AnnounceServiceRequest message
message AnnounceServiceResponse {
  required bool ok = 1;
}

// Sent by a ServiceClient to resolve a service name to a ZeroMQ address
message ResolveServiceRequest {
  required string service_name = 1;
}

// Response to ResolveServiceRequest message
message ResolveServiceResponse {
  required bool ok = 1;
  required string sock_addr = 2;
}

// Heartbeat sent by node to resolver
message HeartBeatRequest {
  required NodeID node_id = 1;
}

// Response to HeartBeatRequest message
message HeartBeatResponse {
  required bool ok = 1;
}

// Sent by node to tell a topic it is publishing onto/subscribing to
message NodeTopicRequest {
  required string node_name = 1;
  required string topic_name = 2;
  required bool reverse = 3;
  required bool active = 4;
}

// Response to NodeTopic
message NodeTopicResponse {
}

// Sent by node to tell a service it is offering
message NodeServiceRequest {
  required string node_name = 1;
  required string service_name = 2;
  required bool reverse = 3;
  required bool active = 4;
}

// Response to NodeService
message NodeServiceResponse {
}

message GraphLink {
  required string a = 1;
  required string b = 2;
  required bool reversed = 3;
}

// Graph
message Graph {
  repeated GraphLink node_topic = 1;
  repeated GraphLink node_service = 2;
}

// Sent by node to get the full graph
message GetGraphRequest {
}

// Response to GetGraph
message GetGraphResponse {
  required Graph graph = 1;
}

// This is the message accepted by the resolver service
message Request {
  oneof req {
    AnnounceNodeRequest announce_node = 20;
    ShutdownNodeRequest shutdown_node = 25;
    AnnounceServiceRequest announce_service = 30;
    ResolveServiceRequest resolve = 50;
    HeartBeatRequest heartbeat = 1;
    NodeTopicRequest node_topic = 100;
    NodeServiceRequest node_service = 102;
    GetGraphRequest get_graph = 104;
  }
}

// This is the response returned by the resolver service
message Response {
  oneof resp {
    AnnounceNodeResponse announce_node = 21;
    ShutdownNodeResponse shutdown_node = 26;
    AnnounceServiceResponse announce_service = 31;
    ResolveServiceResponse resolve = 51;
    HeartBeatResponse heartbeat = 2;
    NodeTopicResponse node_topic = 101;
    NodeServiceResponse node_service = 103;
    GetGraphResponse get_graph = 105;
  }
}

