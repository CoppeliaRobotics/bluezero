syntax = "proto2";

package b0.resolver_msgs;

// Sent by node to resolver, to announce its presence
// and try to self-assign a name
message AnnounceNodeRequest {
  optional string node_name = 8; // name of the node
}

// Sent by resolver in reply to AnnounceNodeRequest message, to assign final name
// and give some connection information
message AnnounceNodeResponse {
  required bool ok = 1; // true if successful, false if error. Should abort if false.
  optional string node_name = 2; // name of the node
  optional string xsub_sock_addr = 3; // address of the XSUB zmq socket
  optional string xpub_sock_addr = 4; // address of the XPUB zmq socket
}

// Sent by node to resolver when shutting down
// (it's not really a request buit rather a notification)
message ShutdownNodeRequest {
  required string node_name = 1; // name of the node
}

// Sent by resolver to node in reply to ShutdownNodeRequest
// (but probably will not be received)
message ShutdownNodeResponse {
  required bool ok = 1; // true if successful, false if error
}

// Sent by ServiceServer to announce a service by some name
// The name must be unique
message AnnounceServiceRequest {
  required string node_name = 1; // name of the node
  required string service_name = 2; // name of the service
  required string sock_addr = 3; // address of the zmq socket
}

// Response to AnnounceServiceRequest message
message AnnounceServiceResponse {
  required bool ok = 1; // true if successful, false if error. Should abort if false.
}

// Sent by a ServiceClient to resolve a service name to a ZeroMQ address
message ResolveServiceRequest {
  required string service_name = 1; // name of the service to be resolved
}

// Response to ResolveServiceRequest message
message ResolveServiceResponse {
  required bool ok = 1; // true if successful, false if error (i.e. does not exist)
  optional string sock_addr = 2; // address of the zmq socket
}

// Heartbeat sent by node to resolver
message HeartBeatRequest {
  required string node_name = 1; // name of the node
}

// Response to HeartBeatRequest message
message HeartBeatResponse {
  required bool ok = 1; // true if successful, false if error (i.e. unknown node name)
  optional int64 time_usec = 2; // time of the resolver, used for time synchronization
}

// Sent by node to tell a topic it is publishing onto/subscribing to
message NodeTopicRequest {
  required string node_name = 1; // name of the node
  required string topic_name = 2; // name of the topic
  required bool reverse = 3; // if true, node is a subscriber, otherwise a publisher
  required bool active = 4; // if true, the relationship is starting, otherwise it is ending
}

// Response to NodeTopicRequest message
message NodeTopicResponse {
}

// Sent by node to tell a service it is offering
message NodeServiceRequest {
  required string node_name = 1; // name of the node
  required string service_name = 2; // name of the service
  required bool reverse = 3; // if true, node is a client, otherwise is a server
  required bool active = 4; // if true, the relationship is starting, otherwise it is ending
}

// Response to NodeServiceRequest message
message NodeServiceResponse {
}

// A link in the network
message GraphLink {
  required string a = 1; // node name
  required string b = 2; // topic or service name
  required bool reversed = 3; // direction of link: a->b if false, b->a if true
}

// A complete graph of the network
message Graph {
  repeated string nodes = 1; // list of node names
  repeated GraphLink node_topic = 2; // list of topic links
  repeated GraphLink node_service = 3; // list of service links
}

// Sent by node to resolver, for getting the full graph
message GetGraphRequest {
}

// Response to GetGraphRequest message
message GetGraphResponse {
  required Graph graph = 1; // the complete graph of the network
}

// This is the message accepted by the resolver service
message Request {
  oneof req { // can be any of the following:
    AnnounceNodeRequest announce_node = 20;
    ShutdownNodeRequest shutdown_node = 25;
    AnnounceServiceRequest announce_service = 30;
    ResolveServiceRequest resolve = 50;
    HeartBeatRequest heartbeat = 1;
    NodeTopicRequest node_topic = 100;
    NodeServiceRequest node_service = 102;
    GetGraphRequest get_graph = 104;
  }
}

// This is the response returned by the resolver service
message Response {
  oneof resp { // can be any of the following:
    AnnounceNodeResponse announce_node = 21;
    ShutdownNodeResponse shutdown_node = 26;
    AnnounceServiceResponse announce_service = 31;
    ResolveServiceResponse resolve = 51;
    HeartBeatResponse heartbeat = 2;
    NodeTopicResponse node_topic = 101;
    NodeServiceResponse node_service = 103;
    GetGraphResponse get_graph = 105;
  }
}

